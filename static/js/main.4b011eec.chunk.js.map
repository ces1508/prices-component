{"version":3,"sources":["components/header/index.js","components/switch/index.js","components/PlanCard/feature.js","components/PlanCard/button.js","components/PlanCard/index.js","data/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Switch","handleChange","checkBoxRef","useRef","onChange","current","checked","type","id","ref","htmlFor","ProductCardFeature","feature","isSuggested","ProductCardButton","text","PlanCard","name","monthlyPrice","anuallyPrice","cardType","features","map","f","index","key","defaultProps","plans","App","useState","subscriptionType","setSubscriptionType","value","data","plan","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAUeA,G,MAPA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,iBAAd,eACCD,KCYUE,G,MAfA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACVC,EAAcC,iBAAO,MAI3B,OACE,yBAAKJ,UAAU,mBACb,uBAAGA,UAAU,kBAAb,YACA,2BAAQK,SANZ,WACEH,EAAaC,EAAYG,QAAQC,UAKHC,KAAK,WAAWC,GAAG,SAAUT,UAAU,mBAAmBU,IAAKP,IAC3F,2BAAOQ,QAAQ,SAASX,UAAU,WAClC,uBAAGA,UAAU,kBAAb,cCNSY,EALY,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACzB,uBAAGd,UAAS,4BAAuBc,EAAc,+BAAiC,KAC/ED,ICIUE,EANW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMF,EAAT,EAASA,YAAT,OACxB,4BAAQd,UAAS,2BAAsBc,EAAc,8BAAgC,KAClFE,ICECC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,SAAUb,EAA/C,EAA+CA,KAAMc,EAArD,EAAqDA,SAArD,OACf,yBAAKtB,UAAS,mBAA2B,cAAbqB,EAA2B,sBAAwB,KAC7E,uBAAGrB,UAAU,kBAAkBkB,GAC/B,uBAAGlB,UAAU,mBAA4B,YAATQ,EAAqBW,EAAeC,GACpE,yBAAKpB,UAAU,6BACZsB,EAASC,KAAI,SAACC,EAAGC,GAAJ,OACZ,kBAAC,EAAD,CACEC,IAAKD,EACLZ,QAASW,EACTV,YAA0B,cAAbO,QAInB,kBAAC,EAAD,CAAmBL,KAAK,aAAaF,YAA0B,cAAbO,OAatDJ,EAASU,aAAe,CACtBN,SAAU,SACVb,KAAM,UACNc,SAAU,IAGGL,QCtCC,GACdW,MAAO,CACL,CACEnB,GAAI,QACJS,KAAM,QACNE,aAAc,SACdD,aAAc,QACdG,SAAU,CACR,iBACA,iBACA,oBAGJ,CACEb,GAAI,eACJS,KAAM,eACNE,aAAc,SACdD,aAAc,QACdG,SAAU,CACR,eACA,iBACA,oBAEFR,aAAa,GAEf,CACEL,GAAI,SACJS,KAAM,SACNC,aAAc,QACdC,aAAc,SACdE,SAAU,CACR,eACA,kBACA,uB,MCIOO,MA5Bf,WAAgB,IAAD,EACmCC,mBAAS,WAD5C,mBACNC,EADM,KACYC,EADZ,KAMb,OACE,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQE,aARhB,SAAsB+B,GACpB,GAAIA,EAAO,OAAOD,EAAoB,WACtCA,EAAoB,eAQhB,6BAAShC,UAAU,iBAChBkC,EAAKN,MAAML,KAAI,SAAAY,GAAI,OAClB,kBAAC,EAAD,eACE3B,KAAMuB,EACNL,IAAKS,EAAK1B,IACN0B,EAHN,CAIEd,SAAUc,EAAKrB,YAAc,YAAc,mBCfrCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b011eec.chunk.js","sourcesContent":["import React from 'react'\r\nimport './header.css'\r\n\r\nconst Header = ({ children }) => (\r\n  <header className='header'>\r\n    <h1 className=\"header__title\">our pricing</h1>\r\n    {children}\r\n  </header>\r\n)\r\n\r\nexport default Header\r\n","import React, { useRef } from 'react'\r\nimport './switch.css'\r\n\r\nconst Switch = ({ handleChange }) => {\r\n  const checkBoxRef = useRef(null)\r\n  function onChange () {\r\n    handleChange(checkBoxRef.current.checked)\r\n  }\r\n  return (\r\n    <div className=\"switch__wrapper\">\r\n      <p className='switch__option'>annually</p>\r\n      <input  onChange={onChange} type='checkbox' id=\"switch\"  className=\"switch__checkbox\" ref={checkBoxRef} />\r\n      <label htmlFor=\"switch\" className='switch'></label>\r\n      <p className='switch__option'>monthly</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Switch\r\n","import React from 'react'\r\n\r\nconst ProductCardFeature = ({ feature, isSuggested }) => (\r\n  <p className={`planCard__feature ${isSuggested ? 'planCard__feature--suggested' : ''}`}>\r\n    {feature}\r\n  </p>)\r\n\r\nexport default ProductCardFeature\r\n\r\n","import React from 'react'\r\n\r\nconst ProductCardButton = ({ text, isSuggested }) => (\r\n  <button className={`planCard__button ${isSuggested ? 'planCard__button--suggested' : ''}`}>\r\n    {text}\r\n  </button>\r\n)\r\n\r\nexport default ProductCardButton\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ProductCardFeature from './feature'\r\nimport ProductCardButton from './button'\r\nimport './planCard.css'\r\n\r\nconst PlanCard = ({ name, monthlyPrice, anuallyPrice, cardType, type, features }) => (\r\n  <div className={`planCard ${cardType === 'suggested' ? 'planCard--suggested' : ''}`}>\r\n    <p className='planCard__name'>{name}</p>\r\n    <p className='planCard__price'>{type === 'monthly' ? monthlyPrice : anuallyPrice}</p>\r\n    <div className='planCard__feature-wrapper'>\r\n      {features.map((f, index) => (\r\n        <ProductCardFeature \r\n          key={index} \r\n          feature={f}\r\n          isSuggested={cardType === 'suggested'}\r\n        />\r\n      ))}\r\n    </div>\r\n    <ProductCardButton text='learn more' isSuggested={cardType === 'suggested'} />\r\n  </div>\r\n)\r\n\r\nPlanCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  monthlyPrice: PropTypes.string.isRequired,\r\n  anuallyPrice: PropTypes.string.isRequired,\r\n  cardType: PropTypes.oneOf(['normal', 'suggested']).isRequired,\r\n  type: PropTypes.oneOf(['monthly', 'anually']).isRequired,\r\n  features: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nPlanCard.defaultProps = {\r\n  cardType: 'normal',\r\n  type: 'monthly',\r\n  features: []\r\n}\r\n\r\nexport default PlanCard","export default  {\r\n  plans: [\r\n    {\r\n      id: 'basic',\r\n      name: 'basic',\r\n      anuallyPrice: '199.99',\r\n      monthlyPrice: '19.99',\r\n      features: [\r\n        '500 GB storage',\r\n        '2 user allowed',\r\n        'send up to 3 GB'\r\n      ]\r\n    },\r\n    {\r\n      id: 'professional',\r\n      name: 'professional',\r\n      anuallyPrice: '249.99',\r\n      monthlyPrice: '24.99',\r\n      features: [\r\n        '1 TB storage',\r\n        '5 user allowed',\r\n        'send up to 10 GB'\r\n      ],\r\n      isSuggested: true\r\n    },\r\n    {\r\n      id: 'master',\r\n      name: 'master',\r\n      monthlyPrice: '39.99',\r\n      anuallyPrice: '399.99',\r\n      features: [\r\n        '2 TB storage',\r\n        '10 user allowed',\r\n        'send up to 20 GB'\r\n      ]\r\n    },\r\n  ]\r\n  \r\n}","import React, { useState } from 'react';\nimport Header from './components/header'\nimport Switch from './components/switch'\nimport PlandCard from './components/PlanCard'\nimport data from './data'\nimport './globals.css'\nimport './index.css'\n\n\nfunction App() {\n  const [subscriptionType, setSubscriptionType] = useState('anually')\n  function handleChange(value) {\n    if (value) return setSubscriptionType('monthly')\n    setSubscriptionType('anually')\n  }\n  return (\n    <div className='app'>\n      <div className=\"main-wrapper\">\n        <Header>\n          <Switch handleChange={handleChange}/>\n        </Header>\n        <section className=\"plans-wrapper\">\n          {data.plans.map(plan => (\n            <PlandCard\n              type={subscriptionType}\n              key={plan.id}\n              {...plan}\n              cardType={plan.isSuggested ? 'suggested' : 'normal'}\n            />\n          ))}\n        </section>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}